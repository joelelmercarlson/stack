
==================== FINAL INTERFACE ====================
2019-04-03 19:36:11.067712 UTC

interface main:Main 8064
  interface hash: 8a7a960134a7877d3e8484c9f155b7cf
  ABI hash: 3a5faba35a8dba86a13d14bba5f80b40
  export-list hash: 09dcb10d005c15f3c306ce8a92eb3881
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c3b1fbffefbf72b5dafea555913f7339
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.content
  Main.createOrg
  Main.currentTimePlusMinutes
  Main.main
  Main.next
  Main.nextStudy
  Main.org
  Main.study
  Main.studyContent
module dependencies: Util
package dependencies: array-0.5.3.0 base-4.12.0.0* deepseq-1.4.4.0
                      directory-1.3.3.0 filepath-1.4.2.1 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0 time-1.8.0.2 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.IO 898d4ddbf00eb4732e5f462760aa42ae
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:System.Environment c54e0d0308e729fdace6bc37aa74bb52
import  -/  base-4.12.0.0:System.Exit 3c945ec7c596067c067092c41083c3d0
import  -/  base-4.12.0.0:System.IO c961e5ee6731c0683a6e879272c9e9f6
import  -/  base-4.12.0.0:Text.Printf d9e1f32eb8aa55bafa1cf4360210b275
import  -/  base-4.12.0.0:Text.Read 87f80fc2538a174aea915dd98f74fc0a
import  -/  directory-1.3.3.0:System.Directory 49a915596c61b7c4c6db58cd4e1272c2
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6d87087aea24143d2650f78480d954a3
import  -/  Util 89f5b3ae007365b7c70c4fd835f02852
  exports: d2cceece85c1d58b85069dc052a5cd05
  nth cbc15936479bb674f184e10eae9d6629
import  -/  time-1.8.0.2:Data.Time f6ff4096de7c69ad22c2a67f4dd509e4
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.NominalDiffTime 1f8d7a12d4fd3a2dd2859ec33fffc0dc
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCDiff f7379ca5f5fe20c344d9b773eb2cd220
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCTime bdbfbf02868a59865fdf53beba211615
import  -/  time-1.8.0.2:Data.Time.Clock.POSIX 9cecc2051debab576bd5d468a9a020cc
import  -/  time-1.8.0.2:Data.Time.Format a287d752770eef9928274399aca3a9b3
import  -/  time-1.8.0.2:Data.Time.Format.Locale 97015c59b1e00c77dad074a40f2650d2
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
f62587de9011caf0510ee29184e2d1c0
  content :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Main.content4
                   (GHC.Base.++
                      @ GHC.Types.Char
                      x
                      (GHC.CString.unpackAppendCString#
                         Main.content3
                         (GHC.Base.++ @ GHC.Types.Char x Main.content1)))) -}
e27498c6fdfdf456b21d7c7d1f21c96e
  content1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.content2) -}
809d8f3856141d65ac526023ca140aa4
  content2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: (" 10:00 - 10:45> Agenda\n\
                 \\n\
                 \\n"#) -}
fe356d6d03d9669fec7cca8bc2acedfc
  content3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \#+KEYWORDS:\n\
                 \\n\
                 \\n\
                 \* TODO <"#) -}
16206dc25481abc5544d520b057a6138
  content4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("#+TITLE: Org\n\
                 \#+AUTHOR: \"Joel E Carlson\" <joel.elmer.carlson@gmail.com>\n\
                 \#+DATE: "#) -}
977048cd79fcaa597c650d31599ef551
  createOrg ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,1*U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.createOrg1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
971848971a9737d1b00542ab1ae56051
  createOrg1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U><L,U><L,U><S,U>,
     Unfolding: (\ (month :: GHC.Base.String)
                   (date :: GHC.Base.String)
                   (file :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         (GHC.Base.++ @ GHC.Types.Char file Main.createOrg2)
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 1> {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.Prim.catch#
                            @ GHC.Types.Bool
                            @ GHC.Exception.Type.SomeException
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case System.Directory.createDirectoryIfMissing6
                                    file
                                    s1 of ds6 { (#,#) ipv2 ipv3 ->
                             (# ipv2, GHC.Classes.not ipv3 #) })
                            System.Directory.doesDirectoryExist2
                            w of ds2 { (#,#) ipv2 ipv3 ->
                     case ipv3 of wild {
                       GHC.Types.False
                       -> System.IO.appendFile2
                            @ ()
                            file
                            GHC.IO.IOMode.WriteMode
                            (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot] ->
                             GHC.IO.Handle.Text.hPutStr'
                               hdl
                               (Main.content date)
                               GHC.Types.False)
                            ipv2
                       GHC.Types.True
                       -> case GHC.IO.Handle.FD.openFile1
                                 file
                                 GHC.IO.IOMode.ReadMode
                                 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                          case GHC.IO.Handle.Text.hGetContents1
                                 ipv5
                                 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                          (GHC.IO.Handle.Text.hPutStr'
                             GHC.IO.Handle.FD.stdout
                             ipv7
                             GHC.Types.True)
                            `cast`
                          (GHC.Types.N:IO[0] <()>_R)
                            ipv6 } } } }
                 } in
                 case System.Directory.createDirectoryIfMissing_g month of wild1 {
                   []
                   -> case System.Directory.createDirectoryIfMissing4
                             System.Directory.createDirectoryIfMissing2
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      $w$j ipv2 }
                   : x xs
                   -> case System.Directory.createDirectoryIfMissing4
                             (GHC.List.reverse1
                                @ GHC.IO.FilePath
                                (GHC.Types.:
                                   @ GHC.IO.FilePath
                                   x
                                   (case GHC.List.$wscanlGo
                                           @ GHC.IO.FilePath
                                           @ GHC.IO.FilePath
                                           @ GHC.IO.FilePath
                                           @ GHC.IO.FilePath
                                           System.FilePath.Posix.combine
                                           x
                                           xs of ww { (#,#) ww1 ww2 ->
                                    ww2 }))
                                (GHC.Types.[] @ GHC.IO.FilePath))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      $w$j ipv2 } } }) -}
7bad1916e23d02832c9d6b95a7cee108
  createOrg2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.createOrg3) -}
5eb33d77c2db83020514fde1e9eaa575
  createOrg3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("..."#) -}
c3848f175c31381dafb02fce51170a43
  currentTimePlusMinutes ::
    Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime
    -> GHC.Types.IO Data.Time.Clock.Internal.UTCTime.UTCTime
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.currentTimePlusMinutes1
                  `cast`
                (<Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Time.Clock.Internal.UTCTime.UTCTime>_R)) -}
e196f0ffe3f6aff5d418e1ea45b09408
  currentTimePlusMinutes1 ::
    Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Time.Clock.Internal.UTCTime.UTCTime #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (minutes :: Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Data.Time.Clock.POSIX.getCurrentTime1
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case Data.Time.Clock.POSIX.$wposixSecondsToUTCTime
                           (case ipv1 of ww { Data.Time.Clock.Internal.UTCTime.UTCTime ww1 ww2 ->
                            (GHC.Integer.Type.plusInteger
                               (GHC.Integer.Type.divInteger
                                  (GHC.Integer.Type.timesInteger
                                     minutes
                                       `cast`
                                     (Data.Time.Clock.Internal.NominalDiffTime.N:NominalDiffTime[0] ; Data.Fixed.N:Fixed[0]
                                                                                                          <Data.Fixed.E12>_P)
                                     Main.currentTimePlusMinutes2)
                                  Data.Fixed.$fHasResolutionE5)
                               (Data.Time.Clock.POSIX.$wutcTimeToPOSIXSeconds ww1 ww2)
                                 `cast`
                               (Data.Time.Clock.Internal.NominalDiffTime.N:NominalDiffTime[0] ; Data.Fixed.N:Fixed[0]
                                                                                                    <Data.Fixed.E12>_P))
                              `cast`
                            (Sym (Data.Fixed.N:Fixed[0]
                                      <Data.Fixed.E12>_P) ; Sym (Data.Time.Clock.Internal.NominalDiffTime.N:NominalDiffTime[0])) }) of ww { (#,#) ww1 ww2 ->
                    Data.Time.Clock.Internal.UTCTime.UTCTime ww1 ww2 } #) }) -}
e050c5ad10b81297524286b1d46b2ae4
  currentTimePlusMinutes2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (60000000000000) -}
837c48ef4fd9b56dddce9affc760b054
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f0cbb0a94ddcb26a02569534f11ac97f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Util.nth @ GHC.Base.String Main.main14 ipv1 of wild {
                   GHC.Maybe.Nothing -> Main.main13 ipv
                   GHC.Maybe.Just ds
                   -> case GHC.Base.eqString
                             ds
                             (GHC.CString.unpackCString# Main.main12) of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString
                                  ds
                                  (GHC.CString.unpackCString# Main.main11) of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString
                                       ds
                                       (GHC.CString.unpackCString# Main.main10) of wild3 {
                                  GHC.Types.False -> Main.main13 ipv
                                  GHC.Types.True -> Main.main9 ipv }
                             GHC.Types.True -> Main.main13 ipv }
                        GHC.Types.True -> Main.main2 ipv } } }) -}
d317bba39466bfc5dfe75bf0839ddb11
  main10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("study"#) -}
7676f0cbc444f8959431dd8dfedd32b3
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("org"#) -}
bfa135450dadb994a1c431712714a71e
  main12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("next"#) -}
bf0a8fef600bec29d3d8df57b4c6f989
  main13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Data.Time.Clock.POSIX.getCurrentTime1
                        s of ds1 { (#,#) ipv ipv1 ->
                 let {
                   d :: GHC.Base.String
                   = Data.Time.Format.formatTime
                       @ Data.Time.Clock.Internal.UTCTime.UTCTime
                       Data.Time.Format.$fFormatTimeUTCTime_$cformatCharacter
                         `cast`
                       (Sym (Data.Time.Format.N:FormatTime[0]
                                 <Data.Time.Clock.Internal.UTCTime.UTCTime>_N))
                       Data.Time.Format.Locale.defaultTimeLocale
                       (GHC.CString.unpackCString# Main.main7)
                       ipv1
                 } in
                 let {
                   m :: GHC.Base.String
                   = Data.Time.Format.formatTime
                       @ Data.Time.Clock.Internal.UTCTime.UTCTime
                       Data.Time.Format.$fFormatTimeUTCTime_$cformatCharacter
                         `cast`
                       (Sym (Data.Time.Format.N:FormatTime[0]
                                 <Data.Time.Clock.Internal.UTCTime.UTCTime>_N))
                       Data.Time.Format.Locale.defaultTimeLocale
                       (GHC.CString.unpackCString# Main.main6)
                       ipv1
                 } in
                 Main.createOrg1
                   m
                   d
                   (GHC.Base.++
                      @ GHC.Types.Char
                      m
                      (GHC.CString.unpackAppendCString#
                         Main.main5
                         (GHC.Base.++ @ GHC.Types.Char d Main.main3)))
                   ipv }) -}
ee5dc2af3f45c8072c7165d4c22a5541
  main14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
862c1c504680eb0abd3a3a13f1e06687
  main15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
5098d6cdac7b85b94911442aefecf5bf
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.currentTimePlusMinutes1
                        Main.main8
                          `cast`
                        (Sym (Data.Fixed.N:Fixed[0]
                                  <Data.Fixed.E12>_P) ; Sym (Data.Time.Clock.Internal.NominalDiffTime.N:NominalDiffTime[0]))
                        s of ds1 { (#,#) ipv ipv1 ->
                 let {
                   d :: GHC.Base.String
                   = Data.Time.Format.formatTime
                       @ Data.Time.Clock.Internal.UTCTime.UTCTime
                       Data.Time.Format.$fFormatTimeUTCTime_$cformatCharacter
                         `cast`
                       (Sym (Data.Time.Format.N:FormatTime[0]
                                 <Data.Time.Clock.Internal.UTCTime.UTCTime>_N))
                       Data.Time.Format.Locale.defaultTimeLocale
                       (GHC.CString.unpackCString# Main.main7)
                       ipv1
                 } in
                 let {
                   m :: GHC.Base.String
                   = Data.Time.Format.formatTime
                       @ Data.Time.Clock.Internal.UTCTime.UTCTime
                       Data.Time.Format.$fFormatTimeUTCTime_$cformatCharacter
                         `cast`
                       (Sym (Data.Time.Format.N:FormatTime[0]
                                 <Data.Time.Clock.Internal.UTCTime.UTCTime>_N))
                       Data.Time.Format.Locale.defaultTimeLocale
                       (GHC.CString.unpackCString# Main.main6)
                       ipv1
                 } in
                 Main.createOrg1
                   m
                   d
                   (GHC.Base.++
                      @ GHC.Types.Char
                      m
                      (GHC.CString.unpackAppendCString#
                         Main.main5
                         (GHC.Base.++ @ GHC.Types.Char d Main.main3)))
                   ipv }) -}
6ebe7c9ffd0e456cfd93f4f38cf3e0a6
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
6594e50479b1f4323ef9a8a66a09aa44
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (".org"#) -}
854e068a2e70bea9030ddb284be7ffcc
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
cf3cc0509254c09bb979b01bba38b2a8
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("%B"#) -}
bd44671b1cd858476b54bc327568da78
  main7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("%Y-%m-%d"#) -}
0f5f18855122955f0041b60bc5af553f
  main8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1440000000000000) -}
b9687388c56fa1fae810bd2b66756032
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
4eb636513a03c6d07d22982ad83f2513
  next :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main2 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
97bef61298846de37b94d0b4794f00a5
  nextStudy ::
    [GHC.IO.FilePath]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
fc650cb067c52d026f4222b33290ed41
  org :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main13 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
5a1788cab570ca9349293729cb1052df
  study :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main9 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
8e8b9b6f0ba2bc4ea22cbb4c7e9886bc
  studyContent ::
    GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ (x :: GHC.Base.String) (y :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Main.studyContent5
                   (GHC.Base.++
                      @ GHC.Types.Char
                      x
                      (GHC.CString.unpackAppendCString#
                         Main.studyContent4
                         (GHC.Base.++
                            @ GHC.Types.Char
                            y
                            (GHC.CString.unpackAppendCString#
                               Main.studyContent3
                               (GHC.Base.++ @ GHC.Types.Char x Main.studyContent1)))))) -}
09a95f2a1bf6ae8957b8da6bce371ad0
  studyContent1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.studyContent2) -}
82ecf0692df062ef073eccfc673a625a
  studyContent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\n\
                 \** Abstract\n\
                 \\n\
                 \** Problem Statement\n\
                 \\n\
                 \** Team\n\
                 \\n\
                 \** Current Model\n\
                 \\n\
                 \** Proposed Model\n\
                 \\n\
                 \** Benefits\n\
                 \\n\
                 \** References\n\
                 \\n\
                 \\n\
                 \\n"#) -}
63134abaabb3a1b0031e856b3f163bf8
  studyContent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \#+KEYWORDS: AEET Study\n\
                 \\n\
                 \\n\
                 \* Study "#) -}
21f9c8b02cb0f5b8f5ce28795431fe4c
  studyContent4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \#+AUTHOR: \"Joel E Carlson\" <joel.elmer.carlson@gmail.com>\n\
                 \#+DATE: "#) -}
7fb808e97058c7cfd94d40414c62e7b2
  studyContent5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("#+TITLE: Study "#) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

